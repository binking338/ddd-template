# This file is a template, and might need editing before it works on your project.
# Build a Docker image with CI/CD and push to the GitLab registry.
# Docker-in-Docker documentation: https://docs.gitlab.com/ee/ci/docker/using_docker_build.html
#
# This template uses one generic job with conditional builds
# for the default branch and all other (MR) branches.
variables:
  IMAGE_REPOSITORY: "$DOCKER_REGISTRY_ENDPOINT/$DOCKER_REGISTRY_NAMESPACE/java-biz-svc"
  IMAGE_TAG: "${CI_PROJECT_NAME}_${CI_PIPELINE_ID}"
  IMAGE_Pull_SECRET: docker-secret
  IMAGE_PULLPOLICY: Always
  # 修改应用名称
  APP_NAME: ddd-template
  APP_CONTEXT_PATH: /ddd-template
  APP_DOCKERFILE: ./Dockerfile
  # APP_GRAY_AGENT_DISABLE: 'true'
  REPLICACOUNT: 1
  MEM_MIN: 768Mi
  MEM_MAX: 1024Mi
  PROD_REPLICACOUNT: 2
  PROD_MEM_MIN: 2000Mi
  PROD_MEM_MAX: 3000Mi

build:
  stage: build
  only:
    - /^(develop|dev|test|release|pre|master|main|prod)([\/-].*)?$/
  tags:
    - shell
  script:
    - export BRANCH=${CI_COMMIT_BRANCH//\//-} && echo "BRANCH = $BRANCH"
    - DOCKER_BUILDKIT=1 docker build -f $APP_DOCKERFILE -t "$IMAGE_REPOSITORY:${CI_PROJECT_NAME}_$BRANCH" .
    - docker push "$IMAGE_REPOSITORY:${CI_PROJECT_NAME}_$BRANCH"
    - |
      if [[ $CI_COMMIT_BRANCH == master* || $CI_COMMIT_BRANCH == main* || $CI_COMMIT_BRANCH == prod* ]]; then
          docker tag "$IMAGE_REPOSITORY:${CI_PROJECT_NAME}_$BRANCH" "$IMAGE_REPOSITORY:${CI_PROJECT_NAME}_$IMAGE_TAG"
          docker push "$IMAGE_REPOSITORY:${CI_PROJECT_NAME}_$IMAGE_TAG"
          docker rmi "$IMAGE_REPOSITORY:${CI_PROJECT_NAME}_$IMAGE_TAG"
      fi
    - docker rmi "$IMAGE_REPOSITORY:${CI_PROJECT_NAME}_$BRANCH"

code-scan:
  stage: test
  allow_failure: false
  interruptible: true
  only:
    - merge_requests
    - master
  tags:
    - shell
  script:
    - DOCKER_BUILDKIT=1 docker build -f $APP_DOCKERFILE-sonar -t "$IMAGE_REPOSITORY:${CI_PROJECT_NAME}_$IMAGE_TAG-sonar" --build-arg SONAR_HOST=$SONAR_HOST --build-arg SONAR_LOGIN=$SONAR_LOGIN --build-arg CI_PROJECT_NAME=$CI_PROJECT_NAME --build-arg CI_COMMIT_REF_NAME=$CI_COMMIT_REF_NAME --build-arg CI_PROJECT_TITLE=$CI_PROJECT_TITLE --build-arg CI_PROJECT_URL=$CI_PROJECT_URL .
    - docker rmi "$IMAGE_REPOSITORY:${CI_PROJECT_NAME}_$IMAGE_TAG-sonar"

default:
  before_script:
    - |
      if [ "$CI_JOB_STAGE" == 'deploy' ]
      then
        export BRANCH=${CI_COMMIT_BRANCH//\//-} && echo "BRANCH = $BRANCH"
        if [[ $BRANCH == dev || $BRANCH == develop ]]; then  export ENV=dev; fi
        if [[ $BRANCH == develop-* ]]; then APP_GRAY_ENV="${BRANCH/develop-/}"; export ENV=dev; fi
        if [[ $BRANCH == dev-* ]]; then APP_GRAY_ENV="${BRANCH/dev-/}"; export ENV=dev; fi
        if [[ $BRANCH == test ]]; then  export ENV=test; fi
        if [[ $BRANCH == test-* ]]; then APP_GRAY_ENV="${BRANCH/test-/}"; export ENV=test; fi
        if [[ $BRANCH == pre || $BRANCH == release ]]; then  export ENV=pre; fi
        if [[ $BRANCH == release-* ]]; then APP_GRAY_ENV="${BRANCH/release-/}"; export ENV=pre; fi
        if [[ $BRANCH == pre-* ]]; then APP_GRAY_ENV="${BRANCH/pre-/}"; export ENV=pre; fi
        if [[ $BRANCH == prod || $BRANCH == main || $BRANCH == master ]]; then  export ENV=prod; fi
        if [[ $BRANCH == master-* ]]; then APP_GRAY_ENV="${BRANCH/master-/}"; export ENV=prod; fi
        if [[ $BRANCH == main-* ]]; then APP_GRAY_ENV="${BRANCH/main-/}"; export ENV=prod; fi
        if [[ $BRANCH == prod-* ]]; then APP_GRAY_ENV="${BRANCH/prod-/}"; export ENV=prod; fi

        if [[ -n "$APP_GRAY_ENV" && "$APP_GRAY_ENV" != '*' ]]
        then
            export APP_NAME_EUREKA="${APP_NAME}--gray"
            export APP_NAME_APM="${APP_NAME}--${APP_GRAY_ENV}"
        fi

        if [[ $ENV == dev ]]; then
          echo  '开发环境配置'
          export IMAGE_TAG=${CI_PROJECT_NAME}_${CI_COMMIT_BRANCH//\//-}
          export RAMPercentage=90.0

        elif [[ $ENV == test ]]; then
          echo  '测试环境配置'
          export IMAGE_TAG=${CI_PROJECT_NAME}_${CI_COMMIT_BRANCH//\//-}
          export RAMPercentage=90.0

        elif [[ $ENV == pre ]]; then
          echo  '预发环境配置'
          export IMAGE_TAG=${CI_PROJECT_NAME}_${CI_COMMIT_BRANCH//\//-}
          export RAMPercentage=90.0

        elif [[ $ENV == prod ]]; then
          echo  '生产环境配置'
          export RAMPercentage=70.0
          export IMAGE_TAG=${CI_PROJECT_NAME}_${CI_PIPELINE_ID}
        fi

        export JAVA_OPTIONS="-server -Dserver.port=80 -Dserver.servlet.context-path=${APP_CONTEXT_PATH} -Djava.security.egd=file:/dev/./urandom -Drocketmq.client.logUseSlf4j=true \
           -XX:InitialRAMPercentage=${RAMPercentage} -XX:MaxRAMPercentage=${RAMPercentage} -XX:MinRAMPercentage=${RAMPercentage} -XX:NewRatio=2 -Xss256k -XX:MetaspaceSize=128m -XX:MaxMetaspaceSize=512m -XX:MaxDirectMemorySize=256m -XX:-OmitStackTraceInFastThrow -XX:+UseConcMarkSweepGC -XX:+CMSParallelRemarkEnabled -XX:+ParallelRefProcEnabled -XX:+CMSScavengeBeforeRemark -XX:+UseCMSCompactAtFullCollection -XX:CMSInitiatingOccupancyFraction=65 -XX:+UseCMSInitiatingOccupancyOnly -XX:+ExplicitGCInvokesConcurrentAndUnloadsClasses \
           -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/heap/${APP_NAME_APM}.hprof -Xloggc:/gc.log -XX:+PrintGCDetails -XX:+PrintGCDateStamps \
           -javaagent:/opt/agent/skywalking-agent.jar -Dskywalking.plugin.mysql.trace_sql_parameters=true -Dskywalking.agent.keep_tracing=true"
        if [ "$APP_GRAY_AGENT_DISABLE" != 'true' ]; then
          JAVA_OPTIONS="$JAVA_OPTIONS -javaagent:/opt/gray-agent/gray-agent.jar -Deureka.instance.virtual-host-name=${APP_NAME_EUREKA} -Deureka.instance.secure-virtual-host-name=${APP_NAME_EUREKA} -Deureka.instance.metadata-map.env=${APP_GRAY_ENV}"
        fi

        echo "应用名称 = $APP_NAME"
        echo "灰度环境 = $APP_GRAY_ENV"
        echo "注册服务名(Eureka) = $APP_NAME_EUREKA"
        echo "注册服务名(APM) = $APP_NAME_APM"
        echo "JAVA_OPTIONS = $JAVA_OPTIONS"
        echo "HELM指定参数 = $HELM_EXTRA_PARAM"
        echo "IMAGE = $IMAGE_REPOSITORY:$IMAGE_TAG"

        echo -e "\033[47;32m 1. 开始发布 \033[0m \n";
        helm upgrade $APP_NAME_APM ./.helm \
             --install \
             --set app.env.JAVA_OPTIONS="$JAVA_OPTIONS" --set app.env.SW_AGENT_NAME=$APP_NAME_APM --set app.env.APP_GRAY_ENV=$APP_GRAY_ENV --set app.env.APP_NAME_EUREKA=$APP_NAME_EUREKA --set app.contextPath=$APP_CONTEXT_PATH \
             --set image.tag=$IMAGE_TAG --set image.repository=$IMAGE_REPOSITORY --set image.pullPolicy=$IMAGE_PULLPOLICY --set imagePullSecrets[0].name=$IMAGE_Pull_SECRET \
             --set app.env.DEPLOY_TIME=$(date +%Y%m%d%H%M%S) $HELM_EXTRA_PARAM

        echo -e "\033[47;32m 2. 等待发布完成 \033[0m \n"
      fi

deploy-dev:
  stage: deploy
  image: alpine/k8s:1.21.12
  only:
    - /^(develop|dev)([\/-].*)?$/
  tags:
    - k8s
  variables:
    APP_GRAY_ENV: "*"
    APP_NAME_EUREKA: "${APP_NAME}"
    APP_NAME_APM: "${APP_NAME}"
    HELM_EXTRA_PARAM: "--set replicaCount=${REPLICACOUNT},resources.requests.memory=${MEM_MIN},resources.limits.memory=${MEM_MAX}"
  environment:
    name: dev
    kubernetes:
      namespace: develop
  script:
    - |
      export BRANCH=${CI_COMMIT_BRANCH//\//-} && echo "BRANCH = $BRANCH"
      if [[ $BRANCH == develop-* ]]; then APP_GRAY_ENV="${BRANCH/develop-/}"; export ENV=dev; fi
      if [[ $BRANCH == dev-* ]]; then APP_GRAY_ENV="${BRANCH/dev-/}"; export ENV=dev; fi

      if [[ -n "$APP_GRAY_ENV" && "$APP_GRAY_ENV" != '*' ]]
      then
          export APP_NAME_EUREKA="${APP_NAME}--gray"
          export APP_NAME_APM="${APP_NAME}--${APP_GRAY_ENV}"
      fi

      sleep 10
      for ATTEMPTS in 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 ; do
        echo "获取发布状态 ${ATTEMPTS} ..."
        UNAVLIABLE=$(kubectl get deploy $APP_NAME_APM -o jsonpath="{.status.unavailableReplicas}")
        if [ -z $UNAVLIABLE ] ; then
          break
        fi
        sleep 10
      done
      if [ -n "$UNAVLIABLE" ] ; then
        echo -e "\033[47;31m 3. 发布超时 $APP_NAME \033[0m \n"
        POD=$(kubectl get pods -lapp.kubernetes.io/instance=$APP_NAME_APM --sort-by='{.metadata.creationTimestamp}' |tail -n1|grep -Eo "^[^ ]+")
        kubectl logs $POD -c $APP_NAME --tail=2000
        exit 1
      else
        echo -e "\033[47;32m 3. 发布成功 $APP_NAME \033[0m \n"
      fi

deploy-test:
  stage: deploy
  image: alpine/k8s:1.21.12
  only:
    - /^test([\/-].*)?$/
  tags:
    - k8s
  #  when: manual
  variables:
    APP_GRAY_ENV: "*"
    APP_NAME_EUREKA: "${APP_NAME}"
    APP_NAME_APM: "${APP_NAME}"
    HELM_EXTRA_PARAM: "--set replicaCount=${REPLICACOUNT},resources.requests.memory=${MEM_MIN},resources.limits.memory=${MEM_MAX}"
  environment:
    name: test
    kubernetes:
      namespace: test
  script:
    - |
      export BRANCH=${CI_COMMIT_BRANCH//\//-} && echo "BRANCH = $BRANCH"
      if [[ $BRANCH == test-* ]]; then APP_GRAY_ENV="${BRANCH/test-/}"; export ENV=test; fi

      if [[ -n "$APP_GRAY_ENV" && "$APP_GRAY_ENV" != '*' ]]
      then
          export APP_NAME_EUREKA="${APP_NAME}--gray"
          export APP_NAME_APM="${APP_NAME}--${APP_GRAY_ENV}"
      fi

      sleep 10
      for ATTEMPTS in 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 ; do
        echo "获取发布状态 ${ATTEMPTS} ..."
        UNAVLIABLE=$(kubectl get deploy $APP_NAME_APM -o jsonpath="{.status.unavailableReplicas}")
        if [ -z $UNAVLIABLE ] ; then
          break
        fi
        sleep 10
      done
      if [ -n "$UNAVLIABLE" ] ; then
        echo -e "\033[47;31m 3. 发布超时 $APP_NAME \033[0m \n"
        POD=$(kubectl get pods -lapp.kubernetes.io/instance=$APP_NAME_APM --sort-by='{.metadata.creationTimestamp}' |tail -n1|grep -Eo "^[^ ]+")
        kubectl logs $POD -c $APP_NAME --tail=2000
        exit 1
      else
        echo -e "\033[47;32m 3. 发布成功 $APP_NAME \033[0m \n"
      fi

deploy-pre:
  stage: deploy
  image: alpine/k8s:1.21.12
  only:
    - /^(release|pre)([\/-].*)?$/
  tags:
    - k8s
  when: manual
  variables:
    APP_GRAY_ENV: "*"
    APP_NAME_EUREKA: "${APP_NAME}"
    APP_NAME_APM: "${APP_NAME}"
    HELM_EXTRA_PARAM: "--set replicaCount=${REPLICACOUNT},resources.requests.memory=${MEM_MIN},resources.limits.memory=${MEM_MAX}"
  environment:
    name: pre
    kubernetes:
      namespace: release
  script:
    - |
      export BRANCH=${CI_COMMIT_BRANCH//\//-} && echo "BRANCH = $BRANCH"
      if [[ $BRANCH == release-* ]]; then APP_GRAY_ENV="${BRANCH/release-/}"; export ENV=pre; fi
      if [[ $BRANCH == pre-* ]]; then APP_GRAY_ENV="${BRANCH/pre-/}"; export ENV=pre; fi

      if [[ -n "$APP_GRAY_ENV" && "$APP_GRAY_ENV" != '*' ]]
      then
          export APP_NAME_EUREKA="${APP_NAME}--gray"
          export APP_NAME_APM="${APP_NAME}--${APP_GRAY_ENV}"
      fi

      sleep 10
      for ATTEMPTS in 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 ; do
        echo "获取发布状态 ${ATTEMPTS} ..."
        UNAVLIABLE=$(kubectl get deploy $APP_NAME_APM -o jsonpath="{.status.unavailableReplicas}")
        if [ -z $UNAVLIABLE ] ; then
          break
        fi
        sleep 10
      done
      if [ -n "$UNAVLIABLE" ] ; then
        echo -e "\033[47;31m 3. 发布超时 $APP_NAME \033[0m \n"
        POD=$(kubectl get pods -lapp.kubernetes.io/instance=$APP_NAME_APM --sort-by='{.metadata.creationTimestamp}' |tail -n1|grep -Eo "^[^ ]+")
        kubectl logs $POD -c $APP_NAME --tail=2000
        exit 1
      else
        echo -e "\033[47;32m 3. 发布成功 $APP_NAME \033[0m \n"
      fi

deploy-prod:
  stage: deploy
  image: alpine/k8s:1.21.12
  only:
    - /^(master|main|prod)([\/-].*)?$/
  tags:
    - k8s
  when: manual
  variables:
    APP_GRAY_ENV: "*"
    APP_NAME_EUREKA: "${APP_NAME}"
    APP_NAME_APM: "${APP_NAME}"
    HELM_EXTRA_PARAM: "--set replicaCount=${PROD_REPLICACOUNT},resources.requests.memory=${PROD_MEM_MIN},resources.limits.memory=${PROD_MEM_MAX},app.initialContainersEnabled=true"
  environment:
    name: prod
    kubernetes:
      namespace: default
  script:
    - |
      export BRANCH=${CI_COMMIT_BRANCH//\//-} && echo "BRANCH = $BRANCH"
      if [[ $BRANCH == master-* ]]; then APP_GRAY_ENV="${BRANCH/master-/}"; export ENV=prod; fi
      if [[ $BRANCH == main-* ]]; then APP_GRAY_ENV="${BRANCH/main-/}"; export ENV=prod; fi
      if [[ $BRANCH == prod-* ]]; then APP_GRAY_ENV="${BRANCH/prod-/}"; export ENV=prod; fi

      if [[ -n "$APP_GRAY_ENV" && "$APP_GRAY_ENV" != '*' ]]
      then
          export APP_NAME_EUREKA="${APP_NAME}--gray"
          export APP_NAME_APM="${APP_NAME}--${APP_GRAY_ENV}"
      fi

      sleep 10
      for ATTEMPTS in 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 ; do
        echo "获取发布状态 ${ATTEMPTS} ..."
        UNAVLIABLE=$(kubectl get deploy $APP_NAME_APM -o jsonpath="{.status.unavailableReplicas}")
        if [ -z $UNAVLIABLE ] ; then
          break
        fi
        sleep 10
      done
      if [ -n "$UNAVLIABLE" ] ; then
        echo -e "\033[47;31m 3. 发布超时 $APP_NAME \033[0m \n"
        POD=$(kubectl get pods -lapp.kubernetes.io/instance=$APP_NAME_APM --sort-by='{.metadata.creationTimestamp}' |tail -n1|grep -Eo "^[^ ]+")
        kubectl logs $POD -c $APP_NAME --tail=2000
        exit 1
      else
        echo -e "\033[47;32m 3. 发布成功 $APP_NAME \033[0m \n"
      fi
